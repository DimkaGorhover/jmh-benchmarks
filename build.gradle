/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

plugins {
    id "java"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "io.spring.dependency-management" version "1.0.8.RELEASE"
}

repositories {
    mavenCentral()
    jcenter()
}

dependencyManagement {

    dependencies {

        dependency "org.projectlombok:lombok:$lombokVersion"

        dependency "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"
        dependency "org.openjdk.jmh:jmh-core:$jmhVersion"
        dependency "org.openjdk.jmh:jmh-generator-bytecode:$jmhVersion"
        dependency "org.openjdk.jmh:jmh-samples:$jmhVersion"

        dependency "org.junit.jupiter:junit-jupiter-api:$junitPlatformVersion"
        dependency "org.junit.jupiter:junit-jupiter-engine:$junitPlatformVersion"
        dependency "org.junit.jupiter:junit-jupiter-params:$junitPlatformVersion"
        dependency "org.junit.vintage:junit-vintage-engine:$junitPlatformVersion"
    }
}

dependencies {

    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.openjdk.jmh:jmh-generator-annprocess")

    implementation("org.projectlombok:lombok")
    compile("org.apache.commons:commons-lang3:3.8.1")
    compile("com.google.guava:guava:27.0.1-jre")
    compile("org.openjdk.jmh:jmh-core")
    compile("org.openjdk.jmh:jmh-generator-bytecode")
    compile("com.fasterxml.jackson.core:jackson-annotations:2.9.6")
    compile("com.fasterxml.jackson.core:jackson-core:2.9.6")
    compile("com.fasterxml.jackson.core:jackson-databind:2.9.6")

    testAnnotationProcessor("org.projectlombok:lombok")

    testImplementation("org.openjdk.jmh:jmh-samples")
    testImplementation("org.junit.jupiter:junit-jupiter-api")
    testImplementation("org.junit.jupiter:junit-jupiter-engine")
    testImplementation("org.junit.jupiter:junit-jupiter-params")
    testImplementation("org.junit.vintage:junit-vintage-engine")
}
test {

    useJUnitPlatform {

        excludeTags("integration")

        includeEngines("junit-jupiter", "junit-vintage")
    }

    include("**/*Test.class")
    exclude("**/*IntegrationTest.class")

    afterTest { desc, result ->
        //org.gradle.api.internal.tasks.testing.results.DefaultTestResult
        if (result.resultType == TestResult.ResultType.FAILURE) {
            result.failures.each { failure ->
                def sep = ('=' * 80)
                if (failure instanceof Throwable) {
                    StringWriter writer = new StringWriter()
                    failure.printStackTrace(new PrintWriter(writer))
                    failure = writer.toString()
                    writer.close()
                }
                System.err.printf("%n${sep}%n${failure}%n${sep}%n%n")
            }
        }
    }

    afterSuite { desc, result ->
        if (!desc.parent && result.testCount > 0) { // will match the outermost suite

            def output = "${project.name}: ${result.resultType} (${result.testCount} tests"
            if (result.successfulTestCount > 0 && result.testCount != result.successfulTestCount)
                output += ", ${result.successfulTestCount} successes"
            if (result.failedTestCount > 0)
                output += ", ${result.failedTestCount} failures"
            if (result.skippedTestCount > 0)
                output += ", ${result.skippedTestCount} skipped"
            output += ")"

            def startItem = '| '
            def endItem = ' |'
            def sep = ('-' * (startItem.length() + output.length() + endItem.length()))

            (result.failedTestCount > 0 ? System.err : System.out).printf("%n${sep}%n${startItem}${output}${endItem}%n${sep}%n%n")
        }
    }
}

wrapper {
    doFirst {
        println "Gradle Wrapper Version: ${gradleWrapperVersion}"
    }
    gradleVersion = "${gradleWrapperVersion}"
    distributionType = Wrapper.DistributionType.ALL
}

shadowJar {
    archiveFileName = "${shadowJarName}"
    manifest {
        attributes "Main-Class": "benchmarks.App"
    }
    configurations = [project.configurations.compile]
}

// Additional keys for RedHat OpenJDK or non-Oracle JDK 11.0.9+
// * -XX:+UseShenandoahGC
// https://wiki.openjdk.java.net/display/shenandoah/Main
task runBenchmarks(type: JavaExec, dependsOn: 'shadowJar') {
    classpath = files("${buildDir}/libs/${shadowJarName}")
    jvmArgs = [
            '-server',
            '-Xms256m',
            '-Xmx256m',
            '-XX:+UseG1GC',
            '-XX:+UnlockExperimentalVMOptions'
    ]
}
